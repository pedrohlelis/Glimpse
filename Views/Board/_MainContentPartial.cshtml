@using Glimpse.ViewModels;
@using System.Text.Json;
@model BoardVM;

<input name="IsMemberSideBarActive" type="hidden">

<div class="lanes text-white" style="max-width: 1250px; max-height: 800px;">
    <div>
        <button id="add-lane-button" class="button-create new-lane-btn mx-5" style="width: 200px;">
            Adicionar Lane
        </button>
        <form id="create-lane-form" class="create-lane-form" asp-action="CreateLane" asp-controller="Lane" method="post" hidden>
            <div style="width: 300px; height: 200px;" class="lane">
                <div class="d-flex align-content-center align-items-center px-1">
                    <input name="name" class="text-white lane-input" placeholder="Nome da raia" type="text" autocomplete="off" style="outline: none;">
                    <input name="id" value="@Model.Board.Id" type="hidden">
                    <input type="hidden" name="IsMemberSideBarActive" class="IsMemberSideBarActiveInput">
                </div>
                <br>
                <hr>
            </div>
        </form>
    </div>
    @foreach (Lane lane in Model.Board.Lanes.OrderBy(lane => lane.Index))
    {
        <div class="swim-lane col mx-3 overflow-y bg-dark" style="min-width: 250px; max-height: 600px;" data-id="@lane.Id" draggable="true">
            <div class="d-flex px-1">
                <p class="text-uppercase fw-bold fs-6" style="margin: 0;">@lane.Name <span class="badge bg-secondary text-black">@lane.Cards.Count</span></p>
            </div>
            <hr>

            @if ((Model.UserRole != null && Model.UserRole.CanManageCards) || Model.User == Model.ProjectResponsibleUser) {
                <div class="col d-flex task-btn">
                    <a class="w-100 align-items-center add-card-link">
                        <button class="button-create add-card-button">
                            <div class="d-flex justify-content-center">
                                <img class="px-1" src="/Icons/plusIcon.svg" alt="">  
                                <p class="px-1 m-0">Nova Tarefa</p>
                            </div>
                        </button>
                    </a>
                </div>
            }
            <form class="create-card-form" asp-action="CreateCard" asp-controller="Card" method="post" hidden>
                <input name="name" class="w-100 py-3 border-3 border-primary text-white card-input" style="background-color: #1E1E1E; border-radius: 13px; outline: none;" placeholder="Nome do cartÃ£o" type="text">
                <input name="laneId" value="@lane.Id" type="hidden">
                <input name="id" value="@Model.Board.Id" type="hidden">
                <input type="hidden" name="IsMemberSideBarActive" class="IsMemberSideBarActiveInput">
            </form>

            <form class="save-card-order-form" asp-action="SaveCardOrder" asp-controller="Card" method="post" hidden>
                <input type="text" name="taskIndexDictionary">
                <input name="id" value="@Model.Board.Id" type="hidden">
                <input type="hidden" name="IsMemberSideBarActive" class="IsMemberSideBarActiveInput">
            </form>

            <form class="save-lane-order-form" asp-action="SaveLaneOrder" asp-controller="Lane" method="post" hidden>
                <input type="text" name="laneIndexDictionary">
                <input name="id" value="@Model.Board.Id" type="hidden">
                <input type="hidden" name="IsMemberSideBarActive" class="IsMemberSideBarActiveInput">
            </form>

            @foreach (Card card in lane.Cards.OrderBy(card => card.Index))
            {
                var tagsJson = JsonSerializer.Serialize(card.Tags.Select(tag => new { tag.Id, tag.Name, tag.Color }));
                var checkboxesJson = JsonSerializer.Serialize(card.Checkboxes.Select( checkbox => new { checkbox.Id, checkbox.Finished, checkbox.Name }));
                var userJson = card.User != null ? JsonSerializer.Serialize(new { card.User.FirstName, card.User.LastName, card.User.Picture }) : "null";

                <div class="task row py-3 border-bottom border-3 border-primary px-2 text-white" 
                    style="background-color: #1E1E1E; border-radius: 13px; cursor: pointer;"
                    data-boardid="@Model.Board.Id"
                    data-id="@card.Id"
                    data-name="@card.Name"
                    data-description="@card.Description"
                    data-date="@card.Date?.ToString("dd/MM/yyyy")"
                    data-tags='@tagsJson'
                    data-user='@userJson'
                    data-checkboxes='@checkboxesJson'
                    draggable="true">
                    <div>
                        @foreach(Tag tag in card.Tags)
                        {
                            <span class="badge fw-light" style="background-color: @tag.Color;">@tag.Name</span>
                        }
                    </div>
                    <a class="text-white card-link" style="text-decoration: none; cursor: pointer;">@card.Name</a>
                    @if(card.User != null)
                    {
                        <div class="d-flex align-content-center pt-3" style="text-wrap: nowrap;">
                            <img src="@(card.User.Picture ?? Url.Content("~/default-images/default-avatar.jpg"))" width="13%" style="border-radius: 50%;">
                            <p class="px-3 m-0 align-content-center text-muted" style="overflow: hidden; text-overflow: ellipsis;">@card.User.FirstName @card.User.LastName</p>
                        </div>
                    }
                </div>
            }
        </div>
        }
</div>
<style>
    .board {
    width: 100%;
    height: 100%;
    }
    .lanes {
    display: flex;
    align-items: flex-start;
    justify-content: start;
    gap: 16px;
    padding: 24px 32px;
    height: 100%;
    overflow-y: auto;
    }

    .swim-lane {
    display: flex;
    flex-direction: column;
    gap: 12px;
    background: #272727;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);
    padding: 12px;
    border-radius: 4px;
    width: 225px;
    min-height: 120px;
    overflow-x: auto;
    }

    .task {
    background: white;
    color: black;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);
    border-radius: 4px;
    font-size: 16px;
    cursor: move;
    }

    .is-dragging {
    scale: 1.05;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);
    background: rgb(50, 50, 50);
    color: white;
    }

    .is-dragging-lane {
        transform: scale(1.05) rotate(-5deg);
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);
        background: rgb(50, 50, 50);
        color: white;
        transition: transform 0.2s ease;
    }
    .add-card-button:hover {
        transform: scale(1.1);
</style>
